{"version":3,"file":"index.esm.js","sources":["../src/helpers/index.ts","../src/structure/index.ts","../src/newDocumentOptions.ts","../src/actions.ts","../src/pluginConfig.ts"],"sourcesContent":["import { Schema } from 'sanity';\nimport { SingletonPluginOptions } from '../types';\n\nexport const getSingletonDocuments = (schema: Schema) =>\n  schema._original?.types\n    .filter(({ options }) => (options as SingletonPluginOptions)?.singleton)\n    .map((s: { name: string }) => s.name);\n\nexport const getIsSingleton = (schema: Schema, schemaType: string) => {\n  const documentSchema = schema._original?.types?.find(\n    ({ name }) => name == schemaType\n  );\n\n  return (\n    (documentSchema?.options as SingletonPluginOptions)?.singleton ?? false\n  );\n};\n","import { getSingletonDocuments } from '../helpers';\nimport { DocumentIcon } from '@sanity/icons';\nimport {\n  SingletonDocumentListItemConfig,\n  SingletonPluginListItemsConfig,\n} from '../types';\n\nconst singletonDocumentListItem = (config: SingletonDocumentListItemConfig) => {\n  if (!config?.S || !config?.type || !config.context) {\n    throw new Error(`\n      S, context, and type must be provided to your singletonDocumentListItem\n      Ex: singletonDocumentListItem({ S, context, type: 'product'})\n    `);\n  }\n  const { S, type, title, icon, id, context } = config;\n  const { schema } = context;\n  const listTitle = title ?? schema.get(type)?.title ?? type;\n  const listIcon = icon ?? DocumentIcon;\n  const listId = id ?? type;\n\n  return S.listItem()\n    .title(listTitle)\n    .icon(listIcon)\n    .child(S.document().schemaType(type).title(listTitle).id(listId));\n};\n\nconst singletonDocumentListItems = (config: SingletonPluginListItemsConfig) => {\n  if (!config.S || !config.context) {\n    throw new Error(`\n      S and context must be provided\n      Ex: singletonDocumentListItems({ S, context })\n    `);\n  }\n\n  const { S, context } = config;\n  const { schema } = context;\n\n  const singletons = getSingletonDocuments(schema);\n\n  return singletons?.map(schemaType =>\n    singletonDocumentListItem({ S, context, type: schemaType })\n  );\n};\n\nconst filteredDocumentListItems = (config: SingletonPluginListItemsConfig) => {\n  if (!config.S || !config.context) {\n    throw new Error(`\n      S and context must be provided\n      Ex: filteredDocumentListItems({ S, context })\n    `);\n  }\n  const { S, context } = config;\n  const { schema } = context;\n\n  const singletons = getSingletonDocuments(schema);\n\n  return S.documentTypeListItems().filter(\n    type => singletons && !singletons.includes(type.getId() as string)\n  );\n};\n\nexport {\n  singletonDocumentListItem,\n  singletonDocumentListItems,\n  filteredDocumentListItems,\n};\n","import { NewDocumentOptionsContext, NewDocumentOptionsResolver } from 'sanity';\nimport { getSingletonDocuments } from './helpers';\n\nexport const newDocumentOptions: NewDocumentOptionsResolver = (\n  prev,\n  { schema, creationContext: { type, schemaType } }: NewDocumentOptionsContext\n) => {\n  const singletons = getSingletonDocuments(schema);\n\n  const filterSingletons = ({ templateId }: { templateId: string }) =>\n    !singletons?.includes(templateId);\n\n  if (type == 'global') return prev.filter(filterSingletons);\n\n  return singletons?.includes(schemaType ?? '')\n    ? prev.filter(filterSingletons)\n    : prev;\n};\n","import { DocumentActionsContext, DocumentActionsResolver } from 'sanity';\nimport { getIsSingleton } from './helpers';\n\nexport const actions: DocumentActionsResolver = (\n  prev,\n  { schema, schemaType }: DocumentActionsContext\n) => {\n  return getIsSingleton(schema, schemaType)\n    ? prev.filter(({ action }) =>\n        ['publish', 'unpublish', 'discardChanges', 'restore'].includes(\n          action as string\n        )\n      )\n    : prev;\n};\n","import { definePlugin } from 'sanity';\nimport { newDocumentOptions } from './newDocumentOptions';\nimport { actions } from './actions';\n\nexport const singletonTools = definePlugin(options => {\n  return {\n    name: 'singleton-tools',\n    document: {\n      newDocumentOptions,\n      actions,\n    },\n  };\n});\n"],"names":[],"mappings":";;AAGa,MAAA,wBAAwB,CAAC,WAAgB;AAHtD,MAAA;AAIE,UAAA,KAAA,OAAO,cAAP,OAAA,SAAA,GAAkB,MACf,OAAO,CAAC,EAAE,cAAe,WAAoC,OAAA,SAAA,QAAA,SAAA,EAC7D,IAAI,CAAC,MAAwB,EAAE,IAAA;AAAA,GAEvB,iBAAiB,CAAC,QAAgB,eAAuB;AARtE,MAAA,IAAA,IAAA,IAAA;AASE,QAAM,kBAAiB,MAAA,KAAA,OAAO,cAAP,OAAA,SAAA,GAAkB,UAAlB,OAAyB,SAAA,GAAA;AAAA,IAC9C,CAAC,EAAE,WAAW,QAAQ;AAAA,EAAA;AAGxB,UACG,MAAgB,KAAA,kBAAA,OAAA,SAAA,eAAA,YAAhB,OAAoD,SAAA,GAAA,cAApD,OAAiE,KAAA;AAEtE,GCTM,4BAA4B,CAAC,WAA4C;AAP/E,MAAA,IAAA;AAQE,MAAI,EAAC,UAAQ,QAAA,OAAA,MAAK,EAAC,UAAQ,QAAA,OAAA,SAAQ,CAAC,OAAO;AACzC,UAAM,IAAI,MAAM;AAAA;AAAA;AAAA,KAGf;AAEG,QAAA,EAAE,GAAG,MAAM,OAAO,MAAM,IAAI,QAAY,IAAA,QACxC,EAAE,OAAA,IAAW,SACb,aAAY,KAAA,SAAA,OAAA,SAAS,KAAO,OAAA,IAAI,IAAI,MAAf,OAAkB,SAAA,GAAA,UAA3B,OAAoC,KAAA,MAChD,WAAW,QAAA,OAAA,OAAQ,cACnB,SAAS,MAAM,OAAA,KAAA;AAEd,SAAA,EAAE,WACN,MAAM,SAAS,EACf,KAAK,QAAQ,EACb,MAAM,EAAE,WAAW,WAAW,IAAI,EAAE,MAAM,SAAS,EAAE,GAAG,MAAM,CAAC;AACpE,GAEM,6BAA6B,CAAC,WAA2C;AAC7E,MAAI,CAAC,OAAO,KAAK,CAAC,OAAO;AACvB,UAAM,IAAI,MAAM;AAAA;AAAA;AAAA,KAGf;AAGG,QAAA,EAAE,GAAG,QAAY,IAAA,QACjB,EAAE,OAAW,IAAA,SAEb,aAAa,sBAAsB,MAAM;AAE/C,SAAO,cAAY,OAAA,SAAA,WAAA;AAAA,IAAI,gBACrB,0BAA0B,EAAE,GAAG,SAAS,MAAM,YAAY;AAAA,EAAA;AAE9D,GAEM,4BAA4B,CAAC,WAA2C;AAC5E,MAAI,CAAC,OAAO,KAAK,CAAC,OAAO;AACvB,UAAM,IAAI,MAAM;AAAA;AAAA;AAAA,KAGf;AAEG,QAAA,EAAE,GAAG,QAAY,IAAA,QACjB,EAAE,OAAW,IAAA,SAEb,aAAa,sBAAsB,MAAM;AAExC,SAAA,EAAE,wBAAwB;AAAA,IAC/B,UAAQ,cAAc,CAAC,WAAW,SAAS,KAAK,OAAiB;AAAA,EAAA;AAErE,GCxDa,qBAAiD,CAC5D,MACA,EAAE,QAAQ,iBAAiB,EAAE,MAAM,WAAW,QAC3C;AACG,QAAA,aAAa,sBAAsB,MAAM,GAEzC,mBAAmB,CAAC,EAAE,WAAW,MACrC,EAAC,cAAA,QAAA,WAAY,SAAS,UAAA;AAEpB,SAAA,QAAQ,YAEL,cAAY,QAAA,WAAA,SAAS,kCAAc,EAFb,IAAA,KAAK,OAAO,gBAAgB,IAIrD;AACN,GCda,UAAmC,CAC9C,MACA,EAAE,QAAQ,WAAW,MAEd,eAAe,QAAQ,UAAU,IACpC,KAAK;AAAA,EAAO,CAAC,EAAE,OAAO,MACpB,CAAC,WAAW,aAAa,kBAAkB,SAAS,EAAE;AAAA,IACpD;AAAA,EACF;AACF,IACA,MCTO,iBAAiB,aAAa,CAClC,aAAA;AAAA,EACL,MAAM;AAAA,EACN,UAAU;AAAA,IACR;AAAA,IACA;AAAA,EACF;AACF,EACD;"}